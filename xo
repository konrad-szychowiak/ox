#!/usr/bin/env bash
B="\e[1m"
RED="\e[31m"
BLUE="\e[34m"
NULL="\e[0m"
LOG="" #"\e[35m"


# preset
symbolX=$RED"X"$NULL
symbolO=$BLUE"O"$NULL

function print_help {
  echo -e "Składnia: ${0##*/} [OPCJA [ARGUMENT] …]"
  echo -e "Prosta gra w kółko i krzyżyk z komputerem. \nKomputer gra losowo, więc gracz ma większe szanse na wygraną.\n"

  echo -e "-h, --help\twyświetla tę pomoc i kończy działanie skryptu"
  echo -e "-q, --quiet\tnie pokazuje logów"
  echo -e "$B-u$NULL\t\tużytkownik zaczyna grę (DOMYŚLNE)"
  echo -e "-c\t\tkomputer zaczyna grę"
  echo -e "$B-x$NULL\t\tgracz gra krzyżykiem (DOMYŚLNE)"
  echo -e "-o\t\tgracz gra kółkiem"

  echo -e "\nOpcje z argumentami:"
  echo -e "-X ZNAK\t\tzastępuje domyslny znak krzyżyka (X) przez ZNAK"
  echo -e "-O ZNAK\t\tzastępuje domyslny znak kółka (O) przez ZNAK"
}

function winner {
  [[ $quite ]] && printf "$LOG[%6s]$NULL Gra zakończona... $1 wygrywa grę.$NULL\n" game
}

function check_if_solved {
  if [ ${XOBOARD[0]} = ${XOBOARD[1]} -a ${XOBOARD[1]} = ${XOBOARD[2]} ]
  then
    winner ${XOBOARD[0]}
    return 0
  fi

  if [ ${XOBOARD[3]} = ${XOBOARD[4]} -a ${XOBOARD[4]} = ${XOBOARD[5]} ]
  then
    winner ${XOBOARD[3]}
    return 0
  fi

  if [ ${XOBOARD[6]} = ${XOBOARD[7]} -a ${XOBOARD[7]} = ${XOBOARD[8]} ]
  then
    winner ${XOBOARD[6]}
    return 0
  fi

  if [ ${XOBOARD[0]} = ${XOBOARD[4]} -a ${XOBOARD[4]} = ${XOBOARD[8]} ]
  then
    winner ${XOBOARD[0]}
    return 0
  fi

  if [ ${XOBOARD[2]} = ${XOBOARD[4]} -a ${XOBOARD[4]} = ${XOBOARD[6]} ]
  then
    winner ${XOBOARD[2]}
    return 0
  fi

  if [ ${XOBOARD[0]} = ${XOBOARD[3]} -a ${XOBOARD[3]} = ${XOBOARD[6]} ]
  then
    winner ${XOBOARD[0]}
    return 0
  fi

  if [ ${XOBOARD[1]} = ${XOBOARD[4]} -a ${XOBOARD[4]} = ${XOBOARD[7]} ]
  then
    winner ${XOBOARD[1]}
    return 0
  fi

  if [ ${XOBOARD[2]} = ${XOBOARD[5]} -a ${XOBOARD[5]} = ${XOBOARD[8]} ]
  then
    winner ${XOBOARD[2]}
    return 0
  fi

  return 1
}

function set_player_symbol {
  case $symbolPlayer in
    X )
      symbolPlayer=$symbolX
      ;;
    Y )
      symbolPlayer=$symbolY
      ;;
#     * )
#       printf "Please redefine player's symbol -? "
#       read symbolPlayer
#       ;;
  esac
}

function put_user_symbol {
  local where=-1
  until [[ 0 -le $where ]] && [[ 9 -ge $where ]] && [[ ${XOBOARD[$where]} == $where ]]; do
    [[ $quite ]] && printf "Zagraj $symbolX na polę: "
    read where
  done

  [[ $quite ]] && printf "$LOG[%6s]$NULL Tura gracza zakończona... $symbolX zagrano na $where...\n" player
  XOBOARD[$where]=$symbolX
}

function put_enemy_symbol {
  local where
  until [[ ${XOBOARD[$where]} == $where ]]; do
    where=$(( $RANDOM % 9 ))
  done
  [[ $quite ]] && printf "$LOG[%6s]$NULL Tura gracza zakończona... $symbolX zagrano na $where...\n" cpu
  XOBOARD[$where]=$symbolO

  check_if_solved
}

function get_symbol {
  case $1 in
    X )
      get=$symbolX
      ;;
    O )
      get=$symbolO
      ;;
    * )
      get=$1
      ;;
  esac

  printf "| $get "
}

function print_board {
  printf "+---+---+---+\n"
  for i in ${!XOBOARD[*]}
  do
      get_symbol ${XOBOARD[$i]}
      if (( $i % 3 == 2 )); then
        printf "|\n+---+---+---+\n"
      fi
  done

  # return 8
}

# MAIN
XOBOARD=(0 1 2 3 4 5 6 7 8)

for arg in "$@"; do
  shift
  case "$arg" in
    "--help")
      set -- "$@" "-h" ;;
    "--quiet")
      set -- "$@" "-q" ;;
    *)
      set -- "$@" "$arg"
  esac
done

while getopts ":hucxoq :X: :O:" opt; do
  case ${opt} in
    h )
      print_help
      exit 0
      ;;
    q )
      quiet=0
      ;;
    u )
      firstPlayer=user
      ;;
    c )
      firstPlayer=cpu
      ;;
    X )
      symbolX=$RED$B$OPTARG$NULL
      # echo -e $BLUE"Symbol for [X] has been overwritten by the user. Now using [$symbolX]."$NULL
      ;;
    O )
      symbolO=$BLUE$B$OPTARG$NULL
      # echo -e $BLUE"Symbol for [O] has been overwritten by the user. Now using [$symbolX]."$NULL
      ;;
    x )
      symbolPlayer=X
      # echo -e $BLUE"User have chosen to play [$symbolX]"$NULL
      ;;
    o )
      symbolPlayer=O
      # echo -e $BLUE"Symbol for [O] has been overwritten by the user. Now using [$symbolX]."$NULL
      ;;
    \? )
      echo "Invalid Option: -$OPTARG" 1>&2
      exit 1
      ;;
    : )
      echo "Invalid Option: -$OPTARG requires an argument" 1>&2
      exit 1
      ;;
  esac
done

set_player_symbol
solved=false

if [[ $firstPlayer = cpu ]]; then
  put_enemy_symbol
fi

print_board
until [[ $solved = true ]]; do

  put_user_symbol $place
  print_board
  check_if_solved && break

  put_enemy_symbol
  print_board
  check_if_solved && break

done
